package filter;

import java.util.stream.Collectors;  
import java.util.List;
import java.util.Optional;
import java.util.ArrayList;
import java.util.HashSet;  
class Products{  
    int id;  
    String name;  
    float price;  
      
    public Products(int id, String name, float price) {  
        this.id = id;  
        this.name = name;  
        this.price = price;  
    }  
}  
public class CollectorsExample {  
    public static void main(String[] args) {  
        List<Products> productsList = new ArrayList<Products>();  
        //Adding Products  
        productsList.add(new Products(1,"HP Laptop",25000f));  
        productsList.add(new Products(2,"Dell Laptop",30000f));  
        productsList.add(new Products(3,"Lenevo Laptop",28000f));  
        productsList.add(new Products(4,"Sony Laptop",28000f));  
        Products one = new Products(5,"Apple Laptop",90000f);
        productsList.add(one); 
        productsList.add(one);
       // productsList = productsList.stream().filter(p->p.name.length()>2).collect(Collectors.toList());
        List<Float> pro = productsList.stream().map(p->p.price).collect(Collectors.toList());
        
        
        Optional<Products> firstP = productsList.stream().findFirst();
        Products firstProduct = firstP.get();
        System.out.println(firstProduct.name);
        
        
        Optional<Products> firstL = productsList.stream().findAny();
        Products LastProduct = firstL.get();
        System.out.println(LastProduct.name);
        
        
       
        
        Optional<Products> secondRecord = productsList.stream().skip(1).findFirst();
        Products secondRecordProduct = secondRecord.get();
        System.out.println(secondRecordProduct.name);
        
        
        
        long countR = productsList.stream().skip(1).count();
         System.out.println("count is - "+countR);
        
         
         List<Products> distinct = productsList.stream().distinct().collect(Collectors.toList());
         distinct.forEach(l->System.out.println("prodct name"+l.name));
         
        
 productsList.stream().collect(Collectors.toSet());
         
        
        List<Float> productPriceList =   
                productsList.stream()  
                            .map(x->x.price)         // fetching price  
                            .collect(Collectors.toList());  // collecting as list  
        //System.out.println(productPriceList);  
    }  
}  